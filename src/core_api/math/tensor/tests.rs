macro_rules! tensor_test_mod {
    ($T:ty,$MN:ident,$S:expr) => {
        mod $MN {
            use crate::core_api::math::{tensor, Tensor};
            use crate::types::{CTorus, FTorus};
            use num_traits::Zero;
            use rand::Rng;

            type Torus = $T;

            #[test]
            fn test_read_write_torus() {
                //! generates a random tensor of Torus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<Torus> = vec![0; size];
                Tensor::uniform_random_default(&mut tensor_in);

                let file_name = concat!("test_read_write_torus_", $S, ".txt");

                // writes in a file
                Tensor::write_in_file(&tensor_in, file_name)
                    .expect("test_read_write_torus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<Torus> = vec![0; size];
                Tensor::read_in_file(&mut tensor_out, file_name)
                    .expect("test_read_write_torus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }

            #[test]
            fn test_read_write_ftorus() {
                //! generates a random tensor of FTorus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<FTorus> = vec![0.; size];
                for val in tensor_in.iter_mut() {
                    *val = rng.gen::<FTorus>();
                }

                let file_name = concat!("test_read_write_ftorus_", $S, ".txt");

                // writes in a file
                tensor::write_in_file_ftorus(&tensor_in, file_name)
                    .expect("test_read_write_ftorus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<FTorus> = vec![0.; size];
                tensor::read_in_file_ftorus(&mut tensor_out, file_name)
                    .expect("test_read_write_ftorus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }

            #[test]
            fn test_read_write_ctorus() {
                //! generates a random tensor of CTorus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<CTorus> = vec![CTorus::zero(); size];
                for val in tensor_in.iter_mut() {
                    val.re = rng.gen::<FTorus>();
                    val.im = rng.gen::<FTorus>();
                }

                let file_name = concat!("test_read_write_ctorus_", $S, ".txt");

                // writes in a file
                tensor::write_in_file_ctorus(&tensor_in, file_name)
                    .expect("test_read_write_ctorus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<CTorus> = vec![CTorus::zero(); size];
                tensor::read_in_file_ctorus(&mut tensor_out, file_name)
                    .expect("test_read_write_ctorus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }
        }
    };
}

tensor_test_mod!(u32, tests_u32, "u32");
tensor_test_mod!(u64, tests_u64, "u64");

use crate::core_api::math::Tensor;

#[test]
fn test_representations_u32() {
    //! tests if float_to_int ( int_to_float(x )) == x only in the 32 bit setting
    type Torus = u32;
    let k = 100;

    // random values
    let mut t_ground_truth: Vec<Torus> = vec![0; k];
    Tensor::uniform_random_default(&mut t_ground_truth);

    // convert to float
    let mut t_float: Vec<f64> = vec![0.; k];
    Tensor::int_to_float(&mut t_float, &t_ground_truth);

    // convert back to Torus
    let mut t_int: Vec<Torus> = vec![0; k];
    Tensor::float_to_int(&mut t_int, &t_float);

    // test
    assert_delta!(t_ground_truth, t_int, 1);
}

#[test]
fn test_representations_u64() {
    //! tests if float_to_int ( int_to_float(x )) == x only in the 32 bit setting
    type Torus = u64;
    let k = 100;

    // random values
    let mut t_ground_truth: Vec<Torus> = vec![0; k];
    Tensor::uniform_random_default(&mut t_ground_truth);

    // convert to float
    let mut t_float: Vec<f64> = vec![0.; k];
    Tensor::int_to_float(&mut t_float, &t_ground_truth);

    // convert back to Torus
    let mut t_int: Vec<Torus> = vec![0; k];
    Tensor::float_to_int(&mut t_int, &t_float);

    // test
    assert_delta!(t_ground_truth, t_int, 1 << 10); // we lose some precision because of the f64 representation
}

#[test]
fn test_add_u32() {
    type Torus = u32;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        2_614_422_625,
        1_347_010_255,
        1_755_118_555,
        3_348_067_670,
        3_896_589_259,
        97_617_327,
        1_545_053_739,
        1_211_085_433,
        2_684_538_667,
        202_832_626,
        1_638_508_087,
        879_523_200,
        2_456_511_176,
        2_648_745_580,
        967_205_272,
        54_854_762,
        2_609_115_771,
        1_725_392_344,
        2_314_671_715,
        1_840_995_902,
        4_041_278_880,
        275_079_767,
        2_300_142_423,
        2_333_095_686,
        3_026_580_357,
        21_931_374,
        372_535_067,
        6_439_834,
        762_787_515,
        2_734_668_397,
        3_013_991_526,
        579_324_780,
        916_175_967,
        850_321_436,
        978_826_112,
        1_360_938_704,
        2_363_410_736,
        353_572_296,
        2_196_029_604,
        1_676_698_573,
        71_702_920,
        433_353_586,
        3_336_662_792,
        3_815_644_954,
        2_974_299_797,
        1_990_548_820,
        1_683_843_869,
        2_152_628_932,
        3_625_450_751,
        2_366_853_676,
        1_798_342_904,
        2_869_368_979,
        1_185_695_639,
        3_173_469_147,
        1_531_916_725,
        3_326_214_024,
        2_067_990_523,
        976_120_805,
        3_535_693_006,
        4_223_913_473,
        2_143_410_133,
        187_637_181,
        2_370_649_336,
        3_155_284_399,
        3_282_898_811,
        3_068_767_567,
        3_033_732_496,
        3_278_852_653,
        1_988_815_405,
        3_318_268_258,
        402_934_292,
        3_162_645_643,
        2_103_209_800,
        4_253_170_701,
        2_489_673_789,
        2_224_135_091,
        1_848_398_457,
        3_159_326_514,
        3_865_725_686,
        674_027_046,
        3_191_092_214,
        356_413_912,
        682_734_067,
        2_368_555_344,
        614_314_161,
        3_515_266_737,
        949_414_245,
        2_046_032_417,
        1_495_462_201,
        2_307_315_576,
        1_960_455_472,
        917_911_666,
        1_518_075_072,
        2_925_772_427,
        298_590_050,
        1_441_972_928,
        666_987_301,
        2_167_997_170,
        3_413_359_382,
        3_526_531_810,
    ]; // vec![0; k] ;
    let t_2: Vec<Torus> = vec![
        3_428_858_567,
        827_447_270,
        959_110_479,
        4_184_350_429,
        1_820_415_259,
        2_322_099_741,
        1_328_906_591,
        1_664_312_159,
        549_610_931,
        2_945_591_302,
        295_342_634,
        1_589_486_080,
        1_359_822_125,
        1_285_568_394,
        1_881_925_871,
        3_058_045_327,
        1_773_709_235,
        3_813_730_789,
        823_940_101,
        2_480_100_080,
        3_639_129_118,
        759_351_495,
        1_301_750_125,
        1_054_832_776,
        3_245_556_275,
        2_800_997_186,
        1_256_287_364,
        2_573_603_461,
        2_328_221_582,
        1_633_069_253,
        102_853_950,
        2_716_685_335,
        503_267_884,
        2_202_048_416,
        1_602_161_938,
        1_927_466_558,
        858_392_614,
        956_183_465,
        4_135_389_917,
        951_071_347,
        2_318_567_902,
        2_004_258_446,
        1_797_038_763,
        1_610_761_714,
        3_236_519_313,
        316_586_765,
        307_967_731,
        3_588_485_359,
        1_947_118_682,
        2_002_927_095,
        1_136_304_281,
        1_065_157_362,
        3_714_003_080,
        786_946_775,
        2_441_787_699,
        832_944_437,
        3_651_539_633,
        798_050_864,
        669_130_367,
        2_000_552_570,
        2_700_875_050,
        1_118_200_520,
        708_688_839,
        3_463_285_323,
        2_270_978_169,
        237_144_352,
        660_096_080,
        4_230_221_095,
        3_280_398_471,
        3_354_541_293,
        833_549_915,
        1_136_697_343,
        1_096_316_847,
        2_476_951_406,
        3_971_141_200,
        12_788_335,
        1_580_197_299,
        2_444_226_867,
        387_836_375,
        4_067_693_575,
        3_918_490_972,
        3_704_639_326,
        664_901_677,
        1_847_150_125,
        476_514_752,
        466_866_141,
        704_667_620,
        2_652_242_441,
        3_683_680_188,
        2_589_696_574,
        571_587_908,
        953_792_331,
        3_677_654_843,
        2_056_915_677,
        3_272_850_239,
        1_669_788_385,
        2_311_731_086,
        162_748_026,
        907_347_406,
        2_760_784_143,
    ]; // vec![0; k] ;
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        1_748_313_896,
        2_174_457_525,
        2_714_229_034,
        3_237_450_803,
        1_422_037_222,
        2_419_717_068,
        2_873_960_330,
        2_875_397_592,
        3_234_149_598,
        3_148_423_928,
        1_933_850_721,
        2_469_009_280,
        3_816_333_301,
        3_934_313_974,
        2_849_131_143,
        3_112_900_089,
        87_857_710,
        1_244_155_837,
        3_138_611_816,
        26_128_686,
        3_385_440_702,
        1_034_431_262,
        3_601_892_548,
        3_387_928_462,
        1_977_169_336,
        2_822_928_560,
        1_628_822_431,
        2_580_043_295,
        3_091_009_097,
        72_770_354,
        3_116_845_476,
        3_296_010_115,
        1_419_443_851,
        3_052_369_852,
        2_580_988_050,
        3_288_405_262,
        3_221_803_350,
        1_309_755_761,
        2_036_452_225,
        2_627_769_920,
        2_390_270_822,
        2_437_612_032,
        838_734_259,
        1_131_439_372,
        1_915_851_814,
        2_307_135_585,
        1_991_811_600,
        1_446_146_995,
        1_277_602_137,
        74_813_475,
        2_934_647_185,
        3_934_526_341,
        604_731_423,
        3_960_415_922,
        3_973_704_424,
        4_159_158_461,
        1_424_562_860,
        1_774_171_669,
        4_204_823_373,
        1_929_498_747,
        549_317_887,
        1_305_837_701,
        3_079_338_175,
        2_323_602_426,
        1_258_909_684,
        3_305_911_919,
        3_693_828_576,
        3_214_106_452,
        974_246_580,
        2_377_842_255,
        1_236_484_207,
        4_375_690,
        3_199_526_647,
        2_435_154_811,
        2_165_847_693,
        2_236_923_426,
        3_428_595_756,
        1_308_586_085,
        4_253_562_061,
        446_753_325,
        2_814_615_890,
        4_061_053_238,
        1_347_635_744,
        4_215_705_469,
        1_090_828_913,
        3_982_132_878,
        1_654_081_865,
        403_307_562,
        884_175_093,
        602_044_854,
        2_532_043_380,
        1_871_703_997,
        900_762_619,
        687_720_808,
        3_571_440_289,
        3_111_761_313,
        2_978_718_387,
        2_330_745_196,
        25_739_492,
        1_992_348_657,
    ];

    Tensor::add(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing addition ");
}

#[test]
fn test_sub_u64() {
    type Torus = u64;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        5_682_232_049_849_203_449,
        1_744_272_140_419_931_610,
        6_524_694_120_235_710_248,
        501_685_223_587_207_708,
        7_454_825_121_449_404_861,
        1_452_049_147_138_516_728,
        3_744_089_800_795_951_655,
        2_900_714_251_440_266_072,
        2_885_003_742_441_599_873,
        5_127_037_330_303_939_263,
        3_942_793_256_559_402_137,
        2_938_215_163_794_025_597,
        3_194_270_088_293_124_907,
        3_798_617_854_173_374_109,
        2_281_550_512_455_919_685,
        1_378_021_925_594_404_903,
        6_273_819_789_066_539_195,
        5_891_518_315_759_560_031,
        6_569_862_020_994_290_872,
        2_312_304_860_409_402_175,
        3_768_205_285_282_560_447,
        2_813_718_090_332_844_130,
        4_741_992_406_149_366_296,
        2_862_912_615_999_044_257,
        2_711_698_756_636_236_379,
        3_105_025_607_153_753_493,
        3_280_659_296_609_069_569,
        1_621_356_564_053_932_659,
        244_394_454_277_671_115,
        1_370_168_407_221_172_838,
        384_807_778_723_441_456,
        5_421_384_837_838_501_695,
        3_524_866_043_795_281_573,
        273_224_951_302_481_390,
        8_874_399_707_947_016_287,
        5_042_853_686_974_107_712,
        8_593_762_746_401_730_055,
        4_298_169_213_116_104_086,
        1_043_682_735_183_771_811,
        8_271_963_865_357_943_237,
        2_866_933_850_832_375_526,
        3_680_273_731_625_120_587,
        5_594_513_115_859_518_166,
        1_643_917_283_539_244_290,
        3_172_178_086_476_235_900,
        6_964_486_530_272_725_036,
        6_025_940_910_517_479_800,
        8_277_718_434_101_601_483,
        8_184_281_612_310_786_511,
        5_373_031_274_997_880_981,
        443_782_149_988_086_463,
        9_185_207_564_855_550_126,
        3_175_405_486_723_930_612,
        538_795_803_601_238_624,
        1_842_522_998_755_997_387,
        756_815_213_533_913_513,
        4_792_029_986_473_993_888,
        4_782_811_555_589_976_751,
        4_765_160_184_182_081_015,
        6_870_421_860_884_204_987,
        6_644_609_928_302_751_438,
        9_205_665_417_060_638_521,
        4_422_362_498_965_857_329,
        3_911_541_231_075_340_397,
        714_780_100_332_094_572,
        854_285_349_422_025_761,
        7_998_144_870_496_815_069,
        4_601_820_771_957_226_501,
        4_668_015_978_555_069_529,
        3_107_134_174_330_286_017,
        8_556_643_770_851_938_756,
        7_603_022_701_719_395_789,
        9_061_759_085_783_731_100,
        335_871_293_124_179_717,
        578_609_166_965_025_587,
        8_344_077_009_920_132_885,
        5_890_072_533_484_701_885,
        4_572_233_892_255_728_435,
        6_510_971_065_603_537_789,
        2_119_489_420_934_143_588,
        7_384_712_968_731_389_043,
        5_631_603_782_423_650_945,
        2_426_176_736_130_500_836,
        8_725_885_473_278_349_136,
        6_998_312_559_885_650_695,
        1_747_649_994_418_612_192,
        5_557_047_201_979_978_882,
        4_330_564_741_999_955_015,
        1_423_746_095_735_226_283,
        6_729_353_041_636_611_170,
        3_912_555_288_358_270_774,
        6_236_800_801_119_694_988,
        1_119_102_165_244_657_550,
        5_444_700_680_136_175_568,
        6_107_520_479_033_799_392,
        6_092_621_673_178_322_094,
        2_613_801_610_897_795_471,
        7_958_414_627_268_864_059,
        1_701_360_089_741_291_949,
        8_900_744_252_335_003_997,
    ];
    let t_2: Vec<Torus> = vec![
        8_256_890_089_369_290_096,
        6_729_858_587_364_974_993,
        7_847_985_733_087_156_225,
        4_256_288_592_723_368_540,
        1_794_053_349_452_132_041,
        6_010_968_597_662_138_399,
        6_274_700_101_275_637_475,
        3_672_569_542_766_325_569,
        7_783_627_030_003_669_629,
        249_357_646_255_069_879,
        5_557_476_119_820_039_974,
        8_042_948_614_404_456_368,
        4_654_915_497_230_252_172,
        7_722_972_477_579_752_886,
        258_964_119_735_943_544,
        3_661_700_972_414_689_603,
        5_780_010_438_965_763_305,
        5_399_007_971_131_851_993,
        9_009_523_661_328_089_448,
        670_837_492_260_568_551,
        8_553_265_509_497_774_774,
        475_007_578_406_922_623,
        1_656_958_878_392_217_405,
        3_145_284_643_778_286_187,
        6_211_468_814_998_169_736,
        7_898_586_816_448_146_424,
        6_385_644_578_140_856_445,
        6_278_113_144_098_235_027,
        5_508_031_993_944_422_488,
        2_541_351_454_611_805_754,
        253_476_817_899_518_218,
        4_042_272_828_677_076_320,
        6_273_812_701_503_178_622,
        7_154_361_991_326_158_245,
        4_812_968_649_666_322_424,
        8_058_877_626_669_330_796,
        2_570_559_734_648_418_432,
        3_260_085_933_573_705_643,
        1_282_517_144_950_793_850,
        1_370_863_113_856_127_345,
        7_751_961_484_782_528_551,
        2_576_515_167_053_557_195,
        6_023_795_786_532_458_230,
        6_726_030_942_349_870_732,
        7_466_418_281_703_253_736,
        8_567_435_608_821_064_654,
        1_678_961_003_340_349_987,
        3_502_334_064_042_353_274,
        3_731_187_845_427_012_882,
        5_317_359_253_712_576_816,
        6_534_183_265_395_520_755,
        3_251_278_594_118_653_876,
        8_455_470_979_973_987_894,
        1_134_450_355_974_787_411,
        2_087_289_461_344_972_800,
        898_091_164_345_629_933,
        1_383_688_945_649_969_441,
        6_412_373_125_771_730_589,
        3_137_727_871_406_467_282,
        2_531_450_854_507_130_283,
        8_942_523_860_499_484_955,
        3_053_185_116_942_316_003,
        7_573_298_098_522_728_453,
        7_850_035_594_752_589_513,
        7_609_365_690_458_693_792,
        3_979_440_714_450_645_544,
        8_679_308_680_362_097_737,
        3_937_728_290_719_953_722,
        3_848_494_478_551_479_774,
        3_384_383_891_744_980_023,
        7_516_977_367_724_693_326,
        435_538_850_065_011_084,
        2_232_114_847_229_197_016,
        8_939_199_010_658_684_319,
        2_450_683_567_053_287_115,
        7_734_458_772_215_536_274,
        8_218_782_583_431_213_252,
        8_553_066_689_779_351_731,
        3_832_186_301_178_121_773,
        6_381_512_211_621_916_311,
        1_300_796_182_487_056_551,
        8_878_587_019_650_156_826,
        8_211_502_017_418_832_896,
        8_604_481_095_678_650_971,
        5_587_624_902_285_300_211,
        3_426_416_825_207_801_687,
        6_489_160_959_956_510_743,
        7_128_903_513_419_063_730,
        4_040_914_739_727_604_681,
        2_688_309_576_123_447_655,
        6_492_809_116_044_763_762,
        7_116_289_826_504_895_799,
        3_531_910_189_811_123_524,
        789_365_259_912_898_159,
        6_469_517_349_990_767_948,
        1_189_741_323_354_180_502,
        1_445_291_182_187_601_512,
        8_147_987_973_554_022_701,
        2_888_875_140_678_677_703,
        7_057_288_198_514_267_233,
    ];
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        15_872_086_034_189_464_969,
        13_461_157_626_764_508_233,
        17_123_452_460_858_105_639,
        14_692_140_704_573_390_784,
        5_660_771_771_997_272_820,
        13_887_824_623_185_929_945,
        15_916_133_773_229_865_796,
        17_674_888_782_383_492_119,
        13_548_120_786_147_481_860,
        4_877_679_684_048_869_384,
        16_832_061_210_448_913_779,
        13_342_010_623_099_120_845,
        16_986_098_664_772_424_351,
        14_522_389_450_303_172_839,
        2_022_586_392_719_976_141,
        16_163_065_026_889_266_916,
        493_809_350_100_775_890,
        492_510_344_627_708_038,
        16_007_082_433_375_753_040,
        1_641_467_368_148_833_624,
        13_661_683_849_494_337_289,
        2_338_710_511_925_921_507,
        3_085_033_527_757_148_891,
        18_164_372_045_930_309_686,
        14_946_974_015_347_618_259,
        13_653_182_864_415_158_685,
        15_341_758_792_177_764_740,
        13_789_987_493_665_249_248,
        13_183_106_534_042_800_243,
        17_275_561_026_318_918_700,
        131_330_960_823_923_238,
        1_379_112_009_161_425_375,
        15_697_797_416_001_654_567,
        11_565_607_033_685_874_761,
        4_061_431_058_280_693_863,
        15_430_720_134_014_328_532,
        6_023_203_011_753_311_623,
        1_038_083_279_542_398_443,
        18_207_909_663_942_529_577,
        6_901_100_751_501_815_892,
        13_561_716_439_759_398_591,
        1_103_758_564_571_563_392,
        18_017_461_403_036_611_552,
        13_364_630_414_898_925_174,
        14_152_503_878_482_533_780,
        16_843_794_995_161_211_998,
        4_346_979_907_177_129_813,
        4_775_384_370_059_248_209,
        4_453_093_766_883_773_629,
        55_672_021_285_304_165,
        12_356_342_958_302_117_324,
        5_933_928_970_736_896_250,
        13_166_678_580_459_494_334,
        17_851_089_521_336_002_829,
        18_201_977_611_120_576_203,
        18_305_468_122_897_835_196,
        3_408_341_040_824_024_447,
        16_817_182_503_527_797_778,
        1_627_432_312_775_613_733,
        4_338_971_006_377_074_704,
        16_148_830_141_512_818_099,
        6_152_480_300_118_322_518,
        15_295_808_474_152_680_492,
        14_508_249_710_032_302_500,
        11_552_158_483_582_952_396,
        15_321_588_708_680_931_833,
        17_765_580_263_844_268_948,
        664_092_481_237_272_779,
        819_521_500_003_589_755,
        18_169_494_356_294_857_610,
        1_039_666_403_127_245_430,
        7_167_483_851_654_384_705,
        6_829_644_238_554_534_084,
        9_843_416_356_175_047_014,
        16_574_669_673_621_290_088,
        609_618_237_704_596_611,
        16_118_034_023_763_040_249,
        14_465_911_276_185_928_320,
        2_678_784_764_425_416_016,
        14_184_721_283_021_778_893,
        6_083_916_786_244_332_492,
        15_199_760_836_483_045_735,
        12_661_418_792_421_219_556,
        121_404_377_599_698_165,
        1_410_687_657_600_350_484,
        16_767_977_242_920_362_121,
        17_514_630_315_733_019_755,
        15_648_405_302_290_442_901,
        15_829_575_429_717_173_218,
        4_041_043_465_513_163_515,
        15_866_490_246_023_058_628,
        17_567_255_048_324_350_805,
        16_033_936_049_143_085_642,
        4_655_335_420_223_277_409,
        18_084_747_202_752_583_060,
        4_902_880_349_824_141_592,
        1_168_510_428_710_193_959,
        18_257_170_727_424_392_974,
        17_259_229_022_772_165_862,
        1_843_456_053_820_736_764,
    ];

    Tensor::sub(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing u-64 sub ");
}

#[test]
fn test_sub_u32() {
    type Torus = u32;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        2_614_422_625,
        1_347_010_255,
        1_755_118_555,
        3_348_067_670,
        3_896_589_259,
        97_617_327,
        1_545_053_739,
        1_211_085_433,
        2_684_538_667,
        202_832_626,
        1_638_508_087,
        879_523_200,
        2_456_511_176,
        2_648_745_580,
        967_205_272,
        54_854_762,
        2_609_115_771,
        1_725_392_344,
        2_314_671_715,
        1_840_995_902,
        4_041_278_880,
        275_079_767,
        2_300_142_423,
        2_333_095_686,
        3_026_580_357,
        21_931_374,
        372_535_067,
        6_439_834,
        762_787_515,
        2_734_668_397,
        3_013_991_526,
        579_324_780,
        916_175_967,
        850_321_436,
        978_826_112,
        1_360_938_704,
        2_363_410_736,
        353_572_296,
        2_196_029_604,
        1_676_698_573,
        71_702_920,
        433_353_586,
        3_336_662_792,
        3_815_644_954,
        2_974_299_797,
        1_990_548_820,
        1_683_843_869,
        2_152_628_932,
        3_625_450_751,
        2_366_853_676,
        1_798_342_904,
        2_869_368_979,
        1_185_695_639,
        3_173_469_147,
        1_531_916_725,
        3_326_214_024,
        2_067_990_523,
        976_120_805,
        3_535_693_006,
        4_223_913_473,
        2_143_410_133,
        187_637_181,
        2_370_649_336,
        3_155_284_399,
        3_282_898_811,
        3_068_767_567,
        3_033_732_496,
        3_278_852_653,
        1_988_815_405,
        3_318_268_258,
        402_934_292,
        3_162_645_643,
        2_103_209_800,
        4_253_170_701,
        2_489_673_789,
        2_224_135_091,
        1_848_398_457,
        3_159_326_514,
        3_865_725_686,
        674_027_046,
        3_191_092_214,
        356_413_912,
        682_734_067,
        2_368_555_344,
        614_314_161,
        3_515_266_737,
        949_414_245,
        2_046_032_417,
        1_495_462_201,
        2_307_315_576,
        1_960_455_472,
        917_911_666,
        1_518_075_072,
        2_925_772_427,
        298_590_050,
        1_441_972_928,
        666_987_301,
        2_167_997_170,
        3_413_359_382,
        3_526_531_810,
    ]; // vec![0; k] ;
    let t_2: Vec<Torus> = vec![
        3_428_858_567,
        827_447_270,
        959_110_479,
        4_184_350_429,
        1_820_415_259,
        2_322_099_741,
        1_328_906_591,
        1_664_312_159,
        549_610_931,
        2_945_591_302,
        295_342_634,
        1_589_486_080,
        1_359_822_125,
        1_285_568_394,
        1_881_925_871,
        3_058_045_327,
        1_773_709_235,
        3_813_730_789,
        823_940_101,
        2_480_100_080,
        3_639_129_118,
        759_351_495,
        1_301_750_125,
        1_054_832_776,
        3_245_556_275,
        2_800_997_186,
        1_256_287_364,
        2_573_603_461,
        2_328_221_582,
        1_633_069_253,
        102_853_950,
        2_716_685_335,
        503_267_884,
        2_202_048_416,
        1_602_161_938,
        1_927_466_558,
        858_392_614,
        956_183_465,
        4_135_389_917,
        951_071_347,
        2_318_567_902,
        2_004_258_446,
        1_797_038_763,
        1_610_761_714,
        3_236_519_313,
        316_586_765,
        307_967_731,
        3_588_485_359,
        1_947_118_682,
        2_002_927_095,
        1_136_304_281,
        1_065_157_362,
        3_714_003_080,
        786_946_775,
        2_441_787_699,
        832_944_437,
        3_651_539_633,
        798_050_864,
        669_130_367,
        2_000_552_570,
        2_700_875_050,
        1_118_200_520,
        708_688_839,
        3_463_285_323,
        2_270_978_169,
        237_144_352,
        660_096_080,
        4_230_221_095,
        3_280_398_471,
        3_354_541_293,
        833_549_915,
        1_136_697_343,
        1_096_316_847,
        2_476_951_406,
        3_971_141_200,
        12_788_335,
        1_580_197_299,
        2_444_226_867,
        387_836_375,
        4_067_693_575,
        3_918_490_972,
        3_704_639_326,
        664_901_677,
        1_847_150_125,
        476_514_752,
        466_866_141,
        704_667_620,
        2_652_242_441,
        3_683_680_188,
        2_589_696_574,
        571_587_908,
        953_792_331,
        3_677_654_843,
        2_056_915_677,
        3_272_850_239,
        1_669_788_385,
        2_311_731_086,
        162_748_026,
        907_347_406,
        2_760_784_143,
    ]; // vec![0; k] ;
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        3_480_531_354,
        519_562_985,
        796_008_076,
        3_458_684_537,
        2_076_174_000,
        2_070_484_882,
        216_147_148,
        3_841_740_570,
        2_134_927_736,
        1_552_208_620,
        1_343_165_453,
        3_585_004_416,
        1_096_689_051,
        1_363_177_186,
        3_380_246_697,
        1_291_776_731,
        835_406_536,
        2_206_628_851,
        1_490_731_614,
        3_655_863_118,
        402_149_762,
        3_810_695_568,
        998_392_298,
        1_278_262_910,
        4_075_991_378,
        1_515_901_484,
        3_411_214_999,
        1_727_803_669,
        2_729_533_229,
        1_101_599_144,
        2_911_137_576,
        2_157_606_741,
        412_908_083,
        2_943_240_316,
        3_671_631_470,
        3_728_439_442,
        1_505_018_122,
        3_692_356_127,
        2_355_606_983,
        725_627_226,
        2_048_102_314,
        2_724_062_436,
        1_539_624_029,
        2_204_883_240,
        4_032_747_780,
        1_673_962_055,
        1_375_876_138,
        2_859_110_869,
        1_678_332_069,
        363_926_581,
        662_038_623,
        1_804_211_617,
        1_766_659_855,
        2_386_522_372,
        3_385_096_322,
        2_493_269_587,
        2_711_418_186,
        178_069_941,
        2_866_562_639,
        2_223_360_903,
        3_737_502_379,
        3_364_403_957,
        1_661_960_497,
        3_986_966_372,
        1_011_920_642,
        2_831_623_215,
        2_373_636_416,
        3_343_598_854,
        3_003_384_230,
        4_258_694_261,
        3_864_351_673,
        2_025_948_300,
        1_006_892_953,
        1_776_219_295,
        2_813_499_885,
        2_211_346_756,
        268_201_158,
        715_099_647,
        3_477_889_311,
        901_300_767,
        3_567_568_538,
        946_741_882,
        17_832_390,
        521_405_219,
        137_799_409,
        3_048_400_596,
        244_746_625,
        3_688_757_272,
        2_106_749_309,
        4_012_586_298,
        1_388_867_564,
        4_259_086_631,
        2_135_387_525,
        868_856_750,
        1_320_707_107,
        4_067_151_839,
        2_650_223_511,
        2_005_249_144,
        2_506_011_976,
        765_747_667,
    ];
    Tensor::sub(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing substraction");
}

#[test]
fn test_add_u64() {
    type Torus = u64;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        5_682_232_049_849_203_449,
        1_744_272_140_419_931_610,
        6_524_694_120_235_710_248,
        501_685_223_587_207_708,
        7_454_825_121_449_404_861,
        1_452_049_147_138_516_728,
        3_744_089_800_795_951_655,
        2_900_714_251_440_266_072,
        2_885_003_742_441_599_873,
        5_127_037_330_303_939_263,
        3_942_793_256_559_402_137,
        2_938_215_163_794_025_597,
        3_194_270_088_293_124_907,
        3_798_617_854_173_374_109,
        2_281_550_512_455_919_685,
        1_378_021_925_594_404_903,
        6_273_819_789_066_539_195,
        5_891_518_315_759_560_031,
        6_569_862_020_994_290_872,
        2_312_304_860_409_402_175,
        3_768_205_285_282_560_447,
        2_813_718_090_332_844_130,
        4_741_992_406_149_366_296,
        2_862_912_615_999_044_257,
        2_711_698_756_636_236_379,
        3_105_025_607_153_753_493,
        3_280_659_296_609_069_569,
        1_621_356_564_053_932_659,
        244_394_454_277_671_115,
        1_370_168_407_221_172_838,
        384_807_778_723_441_456,
        5_421_384_837_838_501_695,
        3_524_866_043_795_281_573,
        273_224_951_302_481_390,
        8_874_399_707_947_016_287,
        5_042_853_686_974_107_712,
        8_593_762_746_401_730_055,
        4_298_169_213_116_104_086,
        1_043_682_735_183_771_811,
        8_271_963_865_357_943_237,
        2_866_933_850_832_375_526,
        3_680_273_731_625_120_587,
        5_594_513_115_859_518_166,
        1_643_917_283_539_244_290,
        3_172_178_086_476_235_900,
        6_964_486_530_272_725_036,
        6_025_940_910_517_479_800,
        8_277_718_434_101_601_483,
        8_184_281_612_310_786_511,
        5_373_031_274_997_880_981,
        443_782_149_988_086_463,
        9_185_207_564_855_550_126,
        3_175_405_486_723_930_612,
        538_795_803_601_238_624,
        1_842_522_998_755_997_387,
        756_815_213_533_913_513,
        4_792_029_986_473_993_888,
        4_782_811_555_589_976_751,
        4_765_160_184_182_081_015,
        6_870_421_860_884_204_987,
        6_644_609_928_302_751_438,
        9_205_665_417_060_638_521,
        4_422_362_498_965_857_329,
        3_911_541_231_075_340_397,
        714_780_100_332_094_572,
        854_285_349_422_025_761,
        7_998_144_870_496_815_069,
        4_601_820_771_957_226_501,
        4_668_015_978_555_069_529,
        3_107_134_174_330_286_017,
        8_556_643_770_851_938_756,
        7_603_022_701_719_395_789,
        9_061_759_085_783_731_100,
        335_871_293_124_179_717,
        578_609_166_965_025_587,
        8_344_077_009_920_132_885,
        5_890_072_533_484_701_885,
        4_572_233_892_255_728_435,
        6_510_971_065_603_537_789,
        2_119_489_420_934_143_588,
        7_384_712_968_731_389_043,
        5_631_603_782_423_650_945,
        2_426_176_736_130_500_836,
        8_725_885_473_278_349_136,
        6_998_312_559_885_650_695,
        1_747_649_994_418_612_192,
        5_557_047_201_979_978_882,
        4_330_564_741_999_955_015,
        1_423_746_095_735_226_283,
        6_729_353_041_636_611_170,
        3_912_555_288_358_270_774,
        6_236_800_801_119_694_988,
        1_119_102_165_244_657_550,
        5_444_700_680_136_175_568,
        6_107_520_479_033_799_392,
        6_092_621_673_178_322_094,
        2_613_801_610_897_795_471,
        7_958_414_627_268_864_059,
        1_701_360_089_741_291_949,
        8_900_744_252_335_003_997,
    ];
    let t_2: Vec<Torus> = vec![
        8_256_890_089_369_290_096,
        6_729_858_587_364_974_993,
        7_847_985_733_087_156_225,
        4_256_288_592_723_368_540,
        1_794_053_349_452_132_041,
        6_010_968_597_662_138_399,
        6_274_700_101_275_637_475,
        3_672_569_542_766_325_569,
        7_783_627_030_003_669_629,
        249_357_646_255_069_879,
        5_557_476_119_820_039_974,
        8_042_948_614_404_456_368,
        4_654_915_497_230_252_172,
        7_722_972_477_579_752_886,
        258_964_119_735_943_544,
        3_661_700_972_414_689_603,
        5_780_010_438_965_763_305,
        5_399_007_971_131_851_993,
        9_009_523_661_328_089_448,
        670_837_492_260_568_551,
        8_553_265_509_497_774_774,
        475_007_578_406_922_623,
        1_656_958_878_392_217_405,
        3_145_284_643_778_286_187,
        6_211_468_814_998_169_736,
        7_898_586_816_448_146_424,
        6_385_644_578_140_856_445,
        6_278_113_144_098_235_027,
        5_508_031_993_944_422_488,
        2_541_351_454_611_805_754,
        253_476_817_899_518_218,
        4_042_272_828_677_076_320,
        6_273_812_701_503_178_622,
        7_154_361_991_326_158_245,
        4_812_968_649_666_322_424,
        8_058_877_626_669_330_796,
        2_570_559_734_648_418_432,
        3_260_085_933_573_705_643,
        1_282_517_144_950_793_850,
        1_370_863_113_856_127_345,
        7_751_961_484_782_528_551,
        2_576_515_167_053_557_195,
        6_023_795_786_532_458_230,
        6_726_030_942_349_870_732,
        7_466_418_281_703_253_736,
        8_567_435_608_821_064_654,
        1_678_961_003_340_349_987,
        3_502_334_064_042_353_274,
        3_731_187_845_427_012_882,
        5_317_359_253_712_576_816,
        6_534_183_265_395_520_755,
        3_251_278_594_118_653_876,
        8_455_470_979_973_987_894,
        1_134_450_355_974_787_411,
        2_087_289_461_344_972_800,
        898_091_164_345_629_933,
        1_383_688_945_649_969_441,
        6_412_373_125_771_730_589,
        3_137_727_871_406_467_282,
        2_531_450_854_507_130_283,
        8_942_523_860_499_484_955,
        3_053_185_116_942_316_003,
        7_573_298_098_522_728_453,
        7_850_035_594_752_589_513,
        7_609_365_690_458_693_792,
        3_979_440_714_450_645_544,
        8_679_308_680_362_097_737,
        3_937_728_290_719_953_722,
        3_848_494_478_551_479_774,
        3_384_383_891_744_980_023,
        7_516_977_367_724_693_326,
        435_538_850_065_011_084,
        2_232_114_847_229_197_016,
        8_939_199_010_658_684_319,
        2_450_683_567_053_287_115,
        7_734_458_772_215_536_274,
        8_218_782_583_431_213_252,
        8_553_066_689_779_351_731,
        3_832_186_301_178_121_773,
        6_381_512_211_621_916_311,
        1_300_796_182_487_056_551,
        8_878_587_019_650_156_826,
        8_211_502_017_418_832_896,
        8_604_481_095_678_650_971,
        5_587_624_902_285_300_211,
        3_426_416_825_207_801_687,
        6_489_160_959_956_510_743,
        7_128_903_513_419_063_730,
        4_040_914_739_727_604_681,
        2_688_309_576_123_447_655,
        6_492_809_116_044_763_762,
        7_116_289_826_504_895_799,
        3_531_910_189_811_123_524,
        789_365_259_912_898_159,
        6_469_517_349_990_767_948,
        1_189_741_323_354_180_502,
        1_445_291_182_187_601_512,
        8_147_987_973_554_022_701,
        2_888_875_140_678_677_703,
        7_057_288_198_514_267_233,
    ];
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        13_939_122_139_218_493_545,
        8_474_130_727_784_906_603,
        14_372_679_853_322_866_473,
        4_757_973_816_310_576_248,
        9_248_878_470_901_536_902,
        7_463_017_744_800_655_127,
        10_018_789_902_071_589_130,
        6_573_283_794_206_591_641,
        10_668_630_772_445_269_502,
        5_376_394_976_559_009_142,
        9_500_269_376_379_442_111,
        10_981_163_778_198_481_965,
        7_849_185_585_523_377_079,
        11_521_590_331_753_126_995,
        2_540_514_632_191_863_229,
        5_039_722_898_009_094_506,
        12_053_830_228_032_302_500,
        11_290_526_286_891_412_024,
        15_579_385_682_322_380_320,
        2_983_142_352_669_970_726,
        12_321_470_794_780_335_221,
        3_288_725_668_739_766_753,
        6_398_951_284_541_583_701,
        6_008_197_259_777_330_444,
        8_923_167_571_634_406_115,
        11_003_612_423_601_899_917,
        9_666_303_874_749_926_014,
        7_899_469_708_152_167_686,
        5_752_426_448_222_093_603,
        3_911_519_861_832_978_592,
        638_284_596_622_959_674,
        9_463_657_666_515_578_015,
        9_798_678_745_298_460_195,
        7_427_586_942_628_639_635,
        13_687_368_357_613_338_711,
        13_101_731_313_643_438_508,
        11_164_322_481_050_148_487,
        7_558_255_146_689_809_729,
        2_326_199_880_134_565_661,
        9_642_826_979_214_070_582,
        10_618_895_335_614_904_077,
        6_256_788_898_678_677_782,
        11_618_308_902_391_976_396,
        8_369_948_225_889_115_022,
        10_638_596_368_179_489_636,
        15_531_922_139_093_789_690,
        7_704_901_913_857_829_787,
        11_780_052_498_143_954_757,
        11_915_469_457_737_799_393,
        10_690_390_528_710_457_797,
        6_977_965_415_383_607_218,
        12_436_486_158_974_204_002,
        11_630_876_466_697_918_506,
        1_673_246_159_576_026_035,
        3_929_812_460_100_970_187,
        1_654_906_377_879_543_446,
        6_175_718_932_123_963_329,
        11_195_184_681_361_707_340,
        7_902_888_055_588_548_297,
        9_401_872_715_391_335_270,
        15_587_133_788_802_236_393,
        12_258_850_534_002_954_524,
        11_995_660_597_488_585_782,
        11_761_576_825_827_929_910,
        8_324_145_790_790_788_364,
        4_833_726_063_872_671_305,
        16_677_453_550_858_912_806,
        8_539_549_062_677_180_223,
        8_516_510_457_106_549_303,
        6_491_518_066_075_266_040,
        16_073_621_138_576_632_082,
        8_038_561_551_784_406_873,
        11_293_873_933_012_928_116,
        9_275_070_303_782_864_036,
        3_029_292_734_018_312_702,
        16_078_535_782_135_669_159,
        14_108_855_116_915_915_137,
        13_125_300_582_035_080_166,
        10_343_157_366_781_659_562,
        8_501_001_632_556_059_899,
        8_685_509_151_218_445_594,
        14_510_190_802_073_807_771,
        10_637_678_753_549_333_732,
        17_330_366_568_957_000_107,
        12_585_937_462_170_950_906,
        5_174_066_819_626_413_879,
        12_046_208_161_936_489_625,
        11_459_468_255_419_018_745,
        5_464_660_835_462_830_964,
        9_417_662_617_760_058_825,
        10_405_364_404_403_034_536,
        13_353_090_627_624_590_787,
        4_651_012_355_055_781_074,
        6_234_065_940_049_073_727,
        12_577_037_829_024_567_340,
        7_282_362_996_532_502_596,
        4_059_092_793_085_396_983,
        16_106_402_600_822_886_760,
        4_590_235_230_419_969_652,
        15_958_032_450_849_271_230,
    ];
    Tensor::add(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing u64 add");
}
