macro_rules! tensor_test_mod {
    ($T:ty,$MN:ident,$S:expr) => {
        mod $MN {
            use crate::operators::math::{tensor, Tensor};
            use crate::types::{CTorus, FTorus};
            use num_traits::Zero;
            use rand::Rng;

            type Torus = $T;

            #[test]
            fn test_read_write_torus() {
                //! generates a random tensor of Torus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<Torus> = vec![0; size];
                Tensor::uniform_random_default(&mut tensor_in);

                let file_name = concat!("test_read_write_torus_", $S, ".txt");

                // writes in a file
                Tensor::write_in_file(&tensor_in, file_name)
                    .expect("test_read_write_torus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<Torus> = vec![0; size];
                Tensor::read_in_file(&mut tensor_out, file_name)
                    .expect("test_read_write_torus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }

            #[test]
            fn test_read_write_ftorus() {
                //! generates a random tensor of FTorus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<FTorus> = vec![0.; size];
                for val in tensor_in.iter_mut() {
                    *val = rng.gen::<FTorus>();
                }

                let file_name = concat!("test_read_write_ftorus_", $S, ".txt");

                // writes in a file
                tensor::write_in_file_ftorus(&tensor_in, file_name)
                    .expect("test_read_write_ftorus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<FTorus> = vec![0.; size];
                tensor::read_in_file_ftorus(&mut tensor_out, file_name)
                    .expect("test_read_write_ftorus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }

            #[test]
            fn test_read_write_ctorus() {
                //! generates a random tensor of CTorus and writes it in a file and read this file
                //! and finally compares if we end up with the same tensor
                let mut rng = rand::thread_rng();

                // setting
                let size: usize = (rng.gen::<usize>() % 2048) + 1;

                // random values
                let mut tensor_in: Vec<CTorus> = vec![CTorus::zero(); size];
                for val in tensor_in.iter_mut() {
                    val.re = rng.gen::<FTorus>();
                    val.im = rng.gen::<FTorus>();
                }

                let file_name = concat!("test_read_write_ctorus_", $S, ".txt");

                // writes in a file
                tensor::write_in_file_ctorus(&tensor_in, file_name)
                    .expect("test_read_write_ctorus: write_in_file threw an error...");

                // reads in a file
                let mut tensor_out: Vec<CTorus> = vec![CTorus::zero(); size];
                tensor::read_in_file_ctorus(&mut tensor_out, file_name)
                    .expect("test_read_write_ctorus: read_in_file threw an error...");

                // test
                assert_eq!(tensor_in, tensor_out);
            }
        }
    };
}

tensor_test_mod!(u32, tests_u32, "u32");
tensor_test_mod!(u64, tests_u64, "u64");

use crate::operators::math::Tensor;

#[test]
fn test_representations_u32() {
    //! tests if float_to_int ( int_to_float(x )) == x only in the 32 bit setting
    type Torus = u32;
    let k = 100;

    // random values
    let mut t_ground_truth: Vec<Torus> = vec![0; k];
    Tensor::uniform_random_default(&mut t_ground_truth);

    // convert to float
    let mut t_float: Vec<f64> = vec![0.; k];
    Tensor::int_to_float(&mut t_float, &t_ground_truth);

    // convert back to Torus
    let mut t_int: Vec<Torus> = vec![0; k];
    Tensor::float_to_int(&mut t_int, &t_float);

    // test
    assert_delta!(t_ground_truth, t_int, 1);
}

#[test]
fn test_representations_u64() {
    //! tests if float_to_int ( int_to_float(x )) == x only in the 32 bit setting
    type Torus = u64;
    let k = 100;

    // random values
    let mut t_ground_truth: Vec<Torus> = vec![0; k];
    Tensor::uniform_random_default(&mut t_ground_truth);

    // convert to float
    let mut t_float: Vec<f64> = vec![0.; k];
    Tensor::int_to_float(&mut t_float, &t_ground_truth);

    // convert back to Torus
    let mut t_int: Vec<Torus> = vec![0; k];
    Tensor::float_to_int(&mut t_int, &t_float);

    // test
    assert_delta!(t_ground_truth, t_int, 1 << 10); // we lose some precision because of the f64 representation
}

#[test]
fn test_add_u32() {
    type Torus = u32;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        2614422625, 1347010255, 1755118555, 3348067670, 3896589259, 97617327, 1545053739,
        1211085433, 2684538667, 202832626, 1638508087, 879523200, 2456511176, 2648745580,
        967205272, 54854762, 2609115771, 1725392344, 2314671715, 1840995902, 4041278880, 275079767,
        2300142423, 2333095686, 3026580357, 21931374, 372535067, 6439834, 762787515, 2734668397,
        3013991526, 579324780, 916175967, 850321436, 978826112, 1360938704, 2363410736, 353572296,
        2196029604, 1676698573, 71702920, 433353586, 3336662792, 3815644954, 2974299797,
        1990548820, 1683843869, 2152628932, 3625450751, 2366853676, 1798342904, 2869368979,
        1185695639, 3173469147, 1531916725, 3326214024, 2067990523, 976120805, 3535693006,
        4223913473, 2143410133, 187637181, 2370649336, 3155284399, 3282898811, 3068767567,
        3033732496, 3278852653, 1988815405, 3318268258, 402934292, 3162645643, 2103209800,
        4253170701, 2489673789, 2224135091, 1848398457, 3159326514, 3865725686, 674027046,
        3191092214, 356413912, 682734067, 2368555344, 614314161, 3515266737, 949414245, 2046032417,
        1495462201, 2307315576, 1960455472, 917911666, 1518075072, 2925772427, 298590050,
        1441972928, 666987301, 2167997170, 3413359382, 3526531810,
    ]; // vec![0; k] ;
    let t_2: Vec<Torus> = vec![
        3428858567, 827447270, 959110479, 4184350429, 1820415259, 2322099741, 1328906591,
        1664312159, 549610931, 2945591302, 295342634, 1589486080, 1359822125, 1285568394,
        1881925871, 3058045327, 1773709235, 3813730789, 823940101, 2480100080, 3639129118,
        759351495, 1301750125, 1054832776, 3245556275, 2800997186, 1256287364, 2573603461,
        2328221582, 1633069253, 102853950, 2716685335, 503267884, 2202048416, 1602161938,
        1927466558, 858392614, 956183465, 4135389917, 951071347, 2318567902, 2004258446,
        1797038763, 1610761714, 3236519313, 316586765, 307967731, 3588485359, 1947118682,
        2002927095, 1136304281, 1065157362, 3714003080, 786946775, 2441787699, 832944437,
        3651539633, 798050864, 669130367, 2000552570, 2700875050, 1118200520, 708688839,
        3463285323, 2270978169, 237144352, 660096080, 4230221095, 3280398471, 3354541293,
        833549915, 1136697343, 1096316847, 2476951406, 3971141200, 12788335, 1580197299,
        2444226867, 387836375, 4067693575, 3918490972, 3704639326, 664901677, 1847150125,
        476514752, 466866141, 704667620, 2652242441, 3683680188, 2589696574, 571587908, 953792331,
        3677654843, 2056915677, 3272850239, 1669788385, 2311731086, 162748026, 907347406,
        2760784143,
    ]; // vec![0; k] ;
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        1748313896, 2174457525, 2714229034, 3237450803, 1422037222, 2419717068, 2873960330,
        2875397592, 3234149598, 3148423928, 1933850721, 2469009280, 3816333301, 3934313974,
        2849131143, 3112900089, 87857710, 1244155837, 3138611816, 26128686, 3385440702, 1034431262,
        3601892548, 3387928462, 1977169336, 2822928560, 1628822431, 2580043295, 3091009097,
        72770354, 3116845476, 3296010115, 1419443851, 3052369852, 2580988050, 3288405262,
        3221803350, 1309755761, 2036452225, 2627769920, 2390270822, 2437612032, 838734259,
        1131439372, 1915851814, 2307135585, 1991811600, 1446146995, 1277602137, 74813475,
        2934647185, 3934526341, 604731423, 3960415922, 3973704424, 4159158461, 1424562860,
        1774171669, 4204823373, 1929498747, 549317887, 1305837701, 3079338175, 2323602426,
        1258909684, 3305911919, 3693828576, 3214106452, 974246580, 2377842255, 1236484207, 4375690,
        3199526647, 2435154811, 2165847693, 2236923426, 3428595756, 1308586085, 4253562061,
        446753325, 2814615890, 4061053238, 1347635744, 4215705469, 1090828913, 3982132878,
        1654081865, 403307562, 884175093, 602044854, 2532043380, 1871703997, 900762619, 687720808,
        3571440289, 3111761313, 2978718387, 2330745196, 25739492, 1992348657,
    ];

    Tensor::add(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing addition ");
}

#[test]
fn test_sub_u64() {
    type Torus = u64;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        5682232049849203449,
        1744272140419931610,
        6524694120235710248,
        501685223587207708,
        7454825121449404861,
        1452049147138516728,
        3744089800795951655,
        2900714251440266072,
        2885003742441599873,
        5127037330303939263,
        3942793256559402137,
        2938215163794025597,
        3194270088293124907,
        3798617854173374109,
        2281550512455919685,
        1378021925594404903,
        6273819789066539195,
        5891518315759560031,
        6569862020994290872,
        2312304860409402175,
        3768205285282560447,
        2813718090332844130,
        4741992406149366296,
        2862912615999044257,
        2711698756636236379,
        3105025607153753493,
        3280659296609069569,
        1621356564053932659,
        244394454277671115,
        1370168407221172838,
        384807778723441456,
        5421384837838501695,
        3524866043795281573,
        273224951302481390,
        8874399707947016287,
        5042853686974107712,
        8593762746401730055,
        4298169213116104086,
        1043682735183771811,
        8271963865357943237,
        2866933850832375526,
        3680273731625120587,
        5594513115859518166,
        1643917283539244290,
        3172178086476235900,
        6964486530272725036,
        6025940910517479800,
        8277718434101601483,
        8184281612310786511,
        5373031274997880981,
        443782149988086463,
        9185207564855550126,
        3175405486723930612,
        538795803601238624,
        1842522998755997387,
        756815213533913513,
        4792029986473993888,
        4782811555589976751,
        4765160184182081015,
        6870421860884204987,
        6644609928302751438,
        9205665417060638521,
        4422362498965857329,
        3911541231075340397,
        714780100332094572,
        854285349422025761,
        7998144870496815069,
        4601820771957226501,
        4668015978555069529,
        3107134174330286017,
        8556643770851938756,
        7603022701719395789,
        9061759085783731100,
        335871293124179717,
        578609166965025587,
        8344077009920132885,
        5890072533484701885,
        4572233892255728435,
        6510971065603537789,
        2119489420934143588,
        7384712968731389043,
        5631603782423650945,
        2426176736130500836,
        8725885473278349136,
        6998312559885650695,
        1747649994418612192,
        5557047201979978882,
        4330564741999955015,
        1423746095735226283,
        6729353041636611170,
        3912555288358270774,
        6236800801119694988,
        1119102165244657550,
        5444700680136175568,
        6107520479033799392,
        6092621673178322094,
        2613801610897795471,
        7958414627268864059,
        1701360089741291949,
        8900744252335003997,
    ];
    let t_2: Vec<Torus> = vec![
        8256890089369290096,
        6729858587364974993,
        7847985733087156225,
        4256288592723368540,
        1794053349452132041,
        6010968597662138399,
        6274700101275637475,
        3672569542766325569,
        7783627030003669629,
        249357646255069879,
        5557476119820039974,
        8042948614404456368,
        4654915497230252172,
        7722972477579752886,
        258964119735943544,
        3661700972414689603,
        5780010438965763305,
        5399007971131851993,
        9009523661328089448,
        670837492260568551,
        8553265509497774774,
        475007578406922623,
        1656958878392217405,
        3145284643778286187,
        6211468814998169736,
        7898586816448146424,
        6385644578140856445,
        6278113144098235027,
        5508031993944422488,
        2541351454611805754,
        253476817899518218,
        4042272828677076320,
        6273812701503178622,
        7154361991326158245,
        4812968649666322424,
        8058877626669330796,
        2570559734648418432,
        3260085933573705643,
        1282517144950793850,
        1370863113856127345,
        7751961484782528551,
        2576515167053557195,
        6023795786532458230,
        6726030942349870732,
        7466418281703253736,
        8567435608821064654,
        1678961003340349987,
        3502334064042353274,
        3731187845427012882,
        5317359253712576816,
        6534183265395520755,
        3251278594118653876,
        8455470979973987894,
        1134450355974787411,
        2087289461344972800,
        898091164345629933,
        1383688945649969441,
        6412373125771730589,
        3137727871406467282,
        2531450854507130283,
        8942523860499484955,
        3053185116942316003,
        7573298098522728453,
        7850035594752589513,
        7609365690458693792,
        3979440714450645544,
        8679308680362097737,
        3937728290719953722,
        3848494478551479774,
        3384383891744980023,
        7516977367724693326,
        435538850065011084,
        2232114847229197016,
        8939199010658684319,
        2450683567053287115,
        7734458772215536274,
        8218782583431213252,
        8553066689779351731,
        3832186301178121773,
        6381512211621916311,
        1300796182487056551,
        8878587019650156826,
        8211502017418832896,
        8604481095678650971,
        5587624902285300211,
        3426416825207801687,
        6489160959956510743,
        7128903513419063730,
        4040914739727604681,
        2688309576123447655,
        6492809116044763762,
        7116289826504895799,
        3531910189811123524,
        789365259912898159,
        6469517349990767948,
        1189741323354180502,
        1445291182187601512,
        8147987973554022701,
        2888875140678677703,
        7057288198514267233,
    ];
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        15872086034189464969,
        13461157626764508233,
        17123452460858105639,
        14692140704573390784,
        5660771771997272820,
        13887824623185929945,
        15916133773229865796,
        17674888782383492119,
        13548120786147481860,
        4877679684048869384,
        16832061210448913779,
        13342010623099120845,
        16986098664772424351,
        14522389450303172839,
        2022586392719976141,
        16163065026889266916,
        493809350100775890,
        492510344627708038,
        16007082433375753040,
        1641467368148833624,
        13661683849494337289,
        2338710511925921507,
        3085033527757148891,
        18164372045930309686,
        14946974015347618259,
        13653182864415158685,
        15341758792177764740,
        13789987493665249248,
        13183106534042800243,
        17275561026318918700,
        131330960823923238,
        1379112009161425375,
        15697797416001654567,
        11565607033685874761,
        4061431058280693863,
        15430720134014328532,
        6023203011753311623,
        1038083279542398443,
        18207909663942529577,
        6901100751501815892,
        13561716439759398591,
        1103758564571563392,
        18017461403036611552,
        13364630414898925174,
        14152503878482533780,
        16843794995161211998,
        4346979907177129813,
        4775384370059248209,
        4453093766883773629,
        55672021285304165,
        12356342958302117324,
        5933928970736896250,
        13166678580459494334,
        17851089521336002829,
        18201977611120576203,
        18305468122897835196,
        3408341040824024447,
        16817182503527797778,
        1627432312775613733,
        4338971006377074704,
        16148830141512818099,
        6152480300118322518,
        15295808474152680492,
        14508249710032302500,
        11552158483582952396,
        15321588708680931833,
        17765580263844268948,
        664092481237272779,
        819521500003589755,
        18169494356294857610,
        1039666403127245430,
        7167483851654384705,
        6829644238554534084,
        9843416356175047014,
        16574669673621290088,
        609618237704596611,
        16118034023763040249,
        14465911276185928320,
        2678784764425416016,
        14184721283021778893,
        6083916786244332492,
        15199760836483045735,
        12661418792421219556,
        121404377599698165,
        1410687657600350484,
        16767977242920362121,
        17514630315733019755,
        15648405302290442901,
        15829575429717173218,
        4041043465513163515,
        15866490246023058628,
        17567255048324350805,
        16033936049143085642,
        4655335420223277409,
        18084747202752583060,
        4902880349824141592,
        1168510428710193959,
        18257170727424392974,
        17259229022772165862,
        1843456053820736764,
    ];

    Tensor::sub(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing u-64 sub ");
}

#[test]
fn test_sub_u32() {
    type Torus = u32;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        2614422625, 1347010255, 1755118555, 3348067670, 3896589259, 97617327, 1545053739,
        1211085433, 2684538667, 202832626, 1638508087, 879523200, 2456511176, 2648745580,
        967205272, 54854762, 2609115771, 1725392344, 2314671715, 1840995902, 4041278880, 275079767,
        2300142423, 2333095686, 3026580357, 21931374, 372535067, 6439834, 762787515, 2734668397,
        3013991526, 579324780, 916175967, 850321436, 978826112, 1360938704, 2363410736, 353572296,
        2196029604, 1676698573, 71702920, 433353586, 3336662792, 3815644954, 2974299797,
        1990548820, 1683843869, 2152628932, 3625450751, 2366853676, 1798342904, 2869368979,
        1185695639, 3173469147, 1531916725, 3326214024, 2067990523, 976120805, 3535693006,
        4223913473, 2143410133, 187637181, 2370649336, 3155284399, 3282898811, 3068767567,
        3033732496, 3278852653, 1988815405, 3318268258, 402934292, 3162645643, 2103209800,
        4253170701, 2489673789, 2224135091, 1848398457, 3159326514, 3865725686, 674027046,
        3191092214, 356413912, 682734067, 2368555344, 614314161, 3515266737, 949414245, 2046032417,
        1495462201, 2307315576, 1960455472, 917911666, 1518075072, 2925772427, 298590050,
        1441972928, 666987301, 2167997170, 3413359382, 3526531810,
    ]; // vec![0; k] ;
    let t_2: Vec<Torus> = vec![
        3428858567, 827447270, 959110479, 4184350429, 1820415259, 2322099741, 1328906591,
        1664312159, 549610931, 2945591302, 295342634, 1589486080, 1359822125, 1285568394,
        1881925871, 3058045327, 1773709235, 3813730789, 823940101, 2480100080, 3639129118,
        759351495, 1301750125, 1054832776, 3245556275, 2800997186, 1256287364, 2573603461,
        2328221582, 1633069253, 102853950, 2716685335, 503267884, 2202048416, 1602161938,
        1927466558, 858392614, 956183465, 4135389917, 951071347, 2318567902, 2004258446,
        1797038763, 1610761714, 3236519313, 316586765, 307967731, 3588485359, 1947118682,
        2002927095, 1136304281, 1065157362, 3714003080, 786946775, 2441787699, 832944437,
        3651539633, 798050864, 669130367, 2000552570, 2700875050, 1118200520, 708688839,
        3463285323, 2270978169, 237144352, 660096080, 4230221095, 3280398471, 3354541293,
        833549915, 1136697343, 1096316847, 2476951406, 3971141200, 12788335, 1580197299,
        2444226867, 387836375, 4067693575, 3918490972, 3704639326, 664901677, 1847150125,
        476514752, 466866141, 704667620, 2652242441, 3683680188, 2589696574, 571587908, 953792331,
        3677654843, 2056915677, 3272850239, 1669788385, 2311731086, 162748026, 907347406,
        2760784143,
    ]; // vec![0; k] ;
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        3480531354, 519562985, 796008076, 3458684537, 2076174000, 2070484882, 216147148,
        3841740570, 2134927736, 1552208620, 1343165453, 3585004416, 1096689051, 1363177186,
        3380246697, 1291776731, 835406536, 2206628851, 1490731614, 3655863118, 402149762,
        3810695568, 998392298, 1278262910, 4075991378, 1515901484, 3411214999, 1727803669,
        2729533229, 1101599144, 2911137576, 2157606741, 412908083, 2943240316, 3671631470,
        3728439442, 1505018122, 3692356127, 2355606983, 725627226, 2048102314, 2724062436,
        1539624029, 2204883240, 4032747780, 1673962055, 1375876138, 2859110869, 1678332069,
        363926581, 662038623, 1804211617, 1766659855, 2386522372, 3385096322, 2493269587,
        2711418186, 178069941, 2866562639, 2223360903, 3737502379, 3364403957, 1661960497,
        3986966372, 1011920642, 2831623215, 2373636416, 3343598854, 3003384230, 4258694261,
        3864351673, 2025948300, 1006892953, 1776219295, 2813499885, 2211346756, 268201158,
        715099647, 3477889311, 901300767, 3567568538, 946741882, 17832390, 521405219, 137799409,
        3048400596, 244746625, 3688757272, 2106749309, 4012586298, 1388867564, 4259086631,
        2135387525, 868856750, 1320707107, 4067151839, 2650223511, 2005249144, 2506011976,
        765747667,
    ];
    Tensor::sub(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing substraction");
}

#[test]
fn test_add_u64() {
    type Torus = u64;
    // HARCODED TEST
    let t_1: Vec<Torus> = vec![
        5682232049849203449,
        1744272140419931610,
        6524694120235710248,
        501685223587207708,
        7454825121449404861,
        1452049147138516728,
        3744089800795951655,
        2900714251440266072,
        2885003742441599873,
        5127037330303939263,
        3942793256559402137,
        2938215163794025597,
        3194270088293124907,
        3798617854173374109,
        2281550512455919685,
        1378021925594404903,
        6273819789066539195,
        5891518315759560031,
        6569862020994290872,
        2312304860409402175,
        3768205285282560447,
        2813718090332844130,
        4741992406149366296,
        2862912615999044257,
        2711698756636236379,
        3105025607153753493,
        3280659296609069569,
        1621356564053932659,
        244394454277671115,
        1370168407221172838,
        384807778723441456,
        5421384837838501695,
        3524866043795281573,
        273224951302481390,
        8874399707947016287,
        5042853686974107712,
        8593762746401730055,
        4298169213116104086,
        1043682735183771811,
        8271963865357943237,
        2866933850832375526,
        3680273731625120587,
        5594513115859518166,
        1643917283539244290,
        3172178086476235900,
        6964486530272725036,
        6025940910517479800,
        8277718434101601483,
        8184281612310786511,
        5373031274997880981,
        443782149988086463,
        9185207564855550126,
        3175405486723930612,
        538795803601238624,
        1842522998755997387,
        756815213533913513,
        4792029986473993888,
        4782811555589976751,
        4765160184182081015,
        6870421860884204987,
        6644609928302751438,
        9205665417060638521,
        4422362498965857329,
        3911541231075340397,
        714780100332094572,
        854285349422025761,
        7998144870496815069,
        4601820771957226501,
        4668015978555069529,
        3107134174330286017,
        8556643770851938756,
        7603022701719395789,
        9061759085783731100,
        335871293124179717,
        578609166965025587,
        8344077009920132885,
        5890072533484701885,
        4572233892255728435,
        6510971065603537789,
        2119489420934143588,
        7384712968731389043,
        5631603782423650945,
        2426176736130500836,
        8725885473278349136,
        6998312559885650695,
        1747649994418612192,
        5557047201979978882,
        4330564741999955015,
        1423746095735226283,
        6729353041636611170,
        3912555288358270774,
        6236800801119694988,
        1119102165244657550,
        5444700680136175568,
        6107520479033799392,
        6092621673178322094,
        2613801610897795471,
        7958414627268864059,
        1701360089741291949,
        8900744252335003997,
    ];
    let t_2: Vec<Torus> = vec![
        8256890089369290096,
        6729858587364974993,
        7847985733087156225,
        4256288592723368540,
        1794053349452132041,
        6010968597662138399,
        6274700101275637475,
        3672569542766325569,
        7783627030003669629,
        249357646255069879,
        5557476119820039974,
        8042948614404456368,
        4654915497230252172,
        7722972477579752886,
        258964119735943544,
        3661700972414689603,
        5780010438965763305,
        5399007971131851993,
        9009523661328089448,
        670837492260568551,
        8553265509497774774,
        475007578406922623,
        1656958878392217405,
        3145284643778286187,
        6211468814998169736,
        7898586816448146424,
        6385644578140856445,
        6278113144098235027,
        5508031993944422488,
        2541351454611805754,
        253476817899518218,
        4042272828677076320,
        6273812701503178622,
        7154361991326158245,
        4812968649666322424,
        8058877626669330796,
        2570559734648418432,
        3260085933573705643,
        1282517144950793850,
        1370863113856127345,
        7751961484782528551,
        2576515167053557195,
        6023795786532458230,
        6726030942349870732,
        7466418281703253736,
        8567435608821064654,
        1678961003340349987,
        3502334064042353274,
        3731187845427012882,
        5317359253712576816,
        6534183265395520755,
        3251278594118653876,
        8455470979973987894,
        1134450355974787411,
        2087289461344972800,
        898091164345629933,
        1383688945649969441,
        6412373125771730589,
        3137727871406467282,
        2531450854507130283,
        8942523860499484955,
        3053185116942316003,
        7573298098522728453,
        7850035594752589513,
        7609365690458693792,
        3979440714450645544,
        8679308680362097737,
        3937728290719953722,
        3848494478551479774,
        3384383891744980023,
        7516977367724693326,
        435538850065011084,
        2232114847229197016,
        8939199010658684319,
        2450683567053287115,
        7734458772215536274,
        8218782583431213252,
        8553066689779351731,
        3832186301178121773,
        6381512211621916311,
        1300796182487056551,
        8878587019650156826,
        8211502017418832896,
        8604481095678650971,
        5587624902285300211,
        3426416825207801687,
        6489160959956510743,
        7128903513419063730,
        4040914739727604681,
        2688309576123447655,
        6492809116044763762,
        7116289826504895799,
        3531910189811123524,
        789365259912898159,
        6469517349990767948,
        1189741323354180502,
        1445291182187601512,
        8147987973554022701,
        2888875140678677703,
        7057288198514267233,
    ];
    let mut t_3: Vec<Torus> = vec![0; 100];
    let ground_truth_t_3: Vec<Torus> = vec![
        13939122139218493545,
        8474130727784906603,
        14372679853322866473,
        4757973816310576248,
        9248878470901536902,
        7463017744800655127,
        10018789902071589130,
        6573283794206591641,
        10668630772445269502,
        5376394976559009142,
        9500269376379442111,
        10981163778198481965,
        7849185585523377079,
        11521590331753126995,
        2540514632191863229,
        5039722898009094506,
        12053830228032302500,
        11290526286891412024,
        15579385682322380320,
        2983142352669970726,
        12321470794780335221,
        3288725668739766753,
        6398951284541583701,
        6008197259777330444,
        8923167571634406115,
        11003612423601899917,
        9666303874749926014,
        7899469708152167686,
        5752426448222093603,
        3911519861832978592,
        638284596622959674,
        9463657666515578015,
        9798678745298460195,
        7427586942628639635,
        13687368357613338711,
        13101731313643438508,
        11164322481050148487,
        7558255146689809729,
        2326199880134565661,
        9642826979214070582,
        10618895335614904077,
        6256788898678677782,
        11618308902391976396,
        8369948225889115022,
        10638596368179489636,
        15531922139093789690,
        7704901913857829787,
        11780052498143954757,
        11915469457737799393,
        10690390528710457797,
        6977965415383607218,
        12436486158974204002,
        11630876466697918506,
        1673246159576026035,
        3929812460100970187,
        1654906377879543446,
        6175718932123963329,
        11195184681361707340,
        7902888055588548297,
        9401872715391335270,
        15587133788802236393,
        12258850534002954524,
        11995660597488585782,
        11761576825827929910,
        8324145790790788364,
        4833726063872671305,
        16677453550858912806,
        8539549062677180223,
        8516510457106549303,
        6491518066075266040,
        16073621138576632082,
        8038561551784406873,
        11293873933012928116,
        9275070303782864036,
        3029292734018312702,
        16078535782135669159,
        14108855116915915137,
        13125300582035080166,
        10343157366781659562,
        8501001632556059899,
        8685509151218445594,
        14510190802073807771,
        10637678753549333732,
        17330366568957000107,
        12585937462170950906,
        5174066819626413879,
        12046208161936489625,
        11459468255419018745,
        5464660835462830964,
        9417662617760058825,
        10405364404403034536,
        13353090627624590787,
        4651012355055781074,
        6234065940049073727,
        12577037829024567340,
        7282362996532502596,
        4059092793085396983,
        16106402600822886760,
        4590235230419969652,
        15958032450849271230,
    ];
    Tensor::add(&mut t_3, &t_1, &t_2);

    assert_eq!(t_3, ground_truth_t_3, "we are testing u64 add");
}
